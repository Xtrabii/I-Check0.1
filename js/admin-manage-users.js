document.addEventListener("DOMContentLoaded", () => {
  const currentPath = window.location.pathname.split("/").pop(); 
  const menuLinks = document.querySelectorAll(".sidebar a");

  menuLinks.forEach(link => {
    if(link.getAttribute("href").includes(currentPath)) {
      link.classList.add("active");
    }
  });
  // üîπ Mock data
  const users = [
    { email: "Yoyo@gmail.com", name: "Yoyo", password: "*****", role: "User", createdDate: "2025-04-25", isSuspended: false},
    { email: "Test1@gmail.com", name: "Test1", password: "*****", role: "User", createdDate: "2025-04-23", isSuspended: false },
    { email: "Test2@gmail.com", name: "Test2", password: "*****", role: "Admin", createdDate: "2025-04-22", isSuspended: false },
    { email: "Test3@gmail.com", name: "Test3", password: "*****", role: "user", createdDate: "2025-04-22", isSuspended: false },
    { email: "Test4@gmail.com", name: "Test4", password: "*****", role: "User", createdDate: "2025-04-21", isSuspended: false },
    { email: "Test5@gmail.com", name: "Test5", password: "*****", role: "User", createdDate: "2025-04-20", isSuspended: false },
    { email: "Test6@gmail.com", name: "Test6", password: "*****", role: "User", createdDate: "2025-04-26", isSuspended: false },
  ];

  const tableBody = document.getElementById("userTableBody");
  const searchInput = document.getElementById("searchInput");
  const userCount = document.getElementById("userCount");

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
  function renderTable(data) {
    tableBody.innerHTML = "";
    data.forEach(user => {
      const row = document.createElement("tr");
      row.dataset.email = user.email;
      row.innerHTML = `
        <td class="text-truncate" style="max-width: 150px;">${user.email}</td>
        <td>${user.name}</td>
        <td>${user.password}</td>
        <td>${user.role}</td>
        <td>${new Date(user.createdDate).toLocaleDateString("en-GB")}</td>
        <td class="text-center">
          <i class="fa-solid fa-pen-to-square text-primary me-2 btn-edit" role="button"></i>
          <i class="${user.isSuspended ? 'fa-solid fa-circle-check text-success' : 'fa-solid fa-ban text-danger'} btn-suspend" role="button"></i>
          <span class="ms-2">${user.isSuspended ? '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö' : ''}</span>
        </td>
      `;
      tableBody.appendChild(row);
    });

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Found count
    userCount.textContent = data.length;

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° EventListener ‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏° Edit
    document.querySelectorAll(".btn-edit").forEach(btn => {
      btn.addEventListener("click", (e) => {
        const row = e.target.closest("tr");
        const email = row.dataset.email;
        const selectedUser = users.find(u => u.email === email);
        // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏•‡∏á sessionStorage
        sessionStorage.setItem("editUser", JSON.stringify(selectedUser));
        // ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ edit
        window.location.href = "admin-edit-users.html";
      });
    });

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° EventListener ‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏° suspend/unsuspend
    document.querySelectorAll(".btn-suspend").forEach(btn => {
        btn.addEventListener("click", handleSuspend);
    });
    }

  function handleSuspend(event) {
    const row = event.target.closest("tr");
    const email = row.dataset.email;
    const user = users.find(u => u.email === email);

    if (!user.isSuspended) {
        // ‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
        Swal.fire({
        title: `‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${user.name}?`,
        text: "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏á‡∏±‡∏ö",
        icon: "warning",
        showCancelButton: true,
        confirmButtonText: "‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ",
        cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
        buttonsStyling: false,
        customClass: {
          confirmButton: 'btn btn-danger mx-2',
          cancelButton: 'btn btn-secondary mx-2'
        },
        }).then(result => {
        if (result.isConfirmed) {
            user.isSuspended = true;
            renderTable(users);
            Swal.fire({
            icon:'success',
            title:'‡∏£‡∏∞‡∏á‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß!', 
            text:`‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${user.name} ‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`, 
            confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
            customClass: {
              confirmButton: "gradient-btn"
            },
            });
        }
        });
    } else {
        // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏á‡∏±‡∏ö
        Swal.fire({
        title: `‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${user.name}?`,
        icon: "question",
        showCancelButton: true,
        confirmButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö",
        cancelButtonText: "‡πÑ‡∏°‡πà",
        buttonsStyling: false,
        customClass: {
            confirmButton: 'btn btn-success mx-2',
            cancelButton: 'btn btn-secondary mx-2'
        },
        }).then(result => {
        if (result.isConfirmed) {
            user.isSuspended = false;
            renderTable(users);
            Swal.fire({
            icon:'success',
            title:'‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!', 
            text:`‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${user.name} ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß`, 
            confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
            customClass: {
              confirmButton: "gradient-btn"
            },
          });
        }
        });
    }
    }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô format ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
  function formatDate(dateStr) {
    const d = new Date(dateStr);
    return d.toLocaleDateString("en-GB"); // DD/MM/YYYY
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô handle delete
  function handleDelete(event) {
    const row = event.target.closest("tr");
    const index = row.dataset.index;
    const user = users[index];

    Swal.fire({
      title: `‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${user.name}?`,
      text: "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
      icon: "warning",
      showCancelButton: true,
      confirmButtonText: "‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ",
      cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
      reverseButtons: true
    }).then((result) => {
      if (result.isConfirmed) {
        // üîπ ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡πâ‡∏î‡∏•‡∏ö database ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
        // deleteUserFromDatabase(user.email);

        // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å mock data
        users.splice(index, 1);
        renderTable(users);

        Swal.fire(
          '‡∏£‡∏∞‡∏á‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß!',
          `‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${user.name} ‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß.`,
          'success'
        );
      }
    });
  }

  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏∏‡∏î
  users.sort((a, b) => new Date(b.createdDate) - new Date(a.createdDate));

  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
  renderTable(users);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô search
  searchInput.addEventListener("keyup", () => {
    const keyword = searchInput.value.toLowerCase();
    const filtered = users.filter(user =>
      user.name.toLowerCase().includes(keyword) ||
      user.email.toLowerCase().includes(keyword)
    );
    renderTable(filtered);
  });
});
